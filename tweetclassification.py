# -*- coding: utf-8 -*-
"""Tweetclassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mG28jG9LFID5qwiaO2MEqaFUHtxIuHbb
"""

#Unzipping the data set

cd /content/drive/My Drive/RNN/

#datasetlink:https://www.kaggle.com/crowdflower/twitter-airline-sentiment
!unzip /content/drive/MyDrive/RNN/twitter_airline.zip

df=pd.read_csv('Tweets.csv')
df.head()

#Splitting data

from sklearn.model_selection import train_test_split
y=df['airline_sentiment']
X=df['text']
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.33,random_state=42)

X_train.shape
X_test.shape

# Placing countvectorization,tfidf,transformation and classificaition using a pipeline 
from sklearn.pipeline import Pipeline
from sklearn.svm import LinearSVC
from sklearn.feature_extraction.text import TfidfVectorizer

model=Pipeline([('tfidf',TfidfVectorizer()),('classifier',LinearSVC())])

#Training our model
model.fit(X_train,y_train)

#Printing out the metrics
from sklearn import metrics

predictions=model.predict(X_test)

print(metrics.classification_report(y_test,predictions))
print(metrics.confusion_matrix(y_test,predictions))
print(f'Our model is {metrics.accuracy_score(y_test,predictions)*100} % accurate')

#Prediction

def pred(text):
  prediction=model.predict(text)
  if prediction=='negative':
    print("The tweet is negative")
  elif prediction=='neutral':
    print('The Tweet is Neutral')
  elif prediction=='positive':
    print('The tweet is positive')

pred(['Today is a good day'])
pred(['I am not feeling good'])
pred(['I am going to the church'])











































































































































































































































